# -*- coding: utf-8 -*-
"""Detecting_FakeNews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBHHWnuJ_vNQNXGeQOUk0z4-kKzMvxeH
"""

# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.linear_model import PassiveAggressiveClassifier

# Load the fake news dataset
from sklearn.datasets import fetch_openml
news = fetch_openml(name='fake-news', version=1, as_frame=True)
df = pd.DataFrame(data=news.data, columns=news.feature_names)
df['target'] = news.target

# Data preprocessing
df.dropna(inplace=True)
X = df['text']
y = df['target']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature extraction using TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train = tfidf_vectorizer.fit_transform(X_train)
tfidf_test = tfidf_vectorizer.transform(X_test)

# Initialize PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Predictions
y_pred = pac.predict(tfidf_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Confusion matrix
confusion_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(confusion_mat)
```

#This program first imports necessary libraries, loads the fake news dataset, preprocesses the data, splits it into training and testing sets, and then extracts features using `TfidfVectorizer`. It then initializes the `PassiveAggressiveClassifier`, fits it to the training data, makes predictions on the test data, and evaluates the model's accuracy using `accuracy_score` and confusion matrix.